<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[Elasticsearch-PHP laravel]]></title>
    <url>%2Fposts%2F46360506.html</url>
    <content type="text"><![CDATA[Elasticsearch 是一个分布式的搜索和分析引擎.Elasticsearch 基于 Lucene 开发，是 Lucene 的封装，提供了 REST API 的操作接口. 基于php为后端语言展开学习所需工具核心软件jdk8以上版本elasticsearch 7以上版本可选包含jdk版kibanalogstashelasticsearch-head 123456789101112131415161718192021222324git clone git://github.com/mobz/elasticsearch-head.gitcd elasticsearch-headnpm installnpm run startopen http://localhost:9100/## 修改配置： 文件：Gruntfile.jsconnect: &#123; server: &#123; options: &#123; port: 9100, hostname: '*', base: '.', keepalive: true &#125; &#125; ## elasticsearch.yml跨域问题http.cors.enabled: truehttp.cors.allow-origin: "*"## kibana运行 kibana.bat访问 http://127.0.0.1:5601 elasticsearch-analysis-ik elastic分词插件 123elasticsearch-plugin.bat install https://github.com/medcl/elasticsearch-analysis-ik/releases/download/v7.4.0/elasticsearch-analysis-ik-7.4.0.zipelasticsearch.bat -d -p pid访问 http://127.0.0.1:9200/ php框架选取laravel6必要组件Elasticsearch-PHP与elastic版本对应 12composer require elasticsearch/elasticsearchcomposer require laravel/scout elasticsearch-php基础知识Elastic 只允许远程访问，修改安装目录的config/elasticsearch.yml文件，去掉network.host的注释，将它的值改成0.0.0.0，然后重新启动 Elastic。 1network.host: 0.0.0.0 查看当前节点的所有 Indexhttp://localhost:9200/_cat/indices?v命令可以列出每个 Index 所包含的 Type。http://localhost:9200/_mapping?pretty=true 1234567891011$hosts = [ '127.0.0.1:9200', // IP + Port '127.0.0.1', // Just IP 'demo.com:92000', // Domain + Port 'mydomain2.server.com', // Just Domain 'https://localhost', // SSL to localhost 'https://192.168.1.3:9200' // SSL to IP + Port];$client = ClientBuilder::create() // Instantiate a new ClientBuilder -&gt;setHosts($hosts) // Set the hosts -&gt;build(); // Build the client object lasticsearch 高亮查询 12345678'highlight' =&gt; [ 'pre_tags' =&gt; ["&lt;em&gt;"], 'post_tags' =&gt; ["&lt;/em&gt;"], 'fields' =&gt; [ "*" =&gt; new \stdClass() ], 'require_field_match' =&gt; false] packagistelasticsearch中文社区Elasticsearch-PHP 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205206207208209210211212213214215216217218219220221222223224225226227228229230231232233234235236237238 $hosts = [ '127.0.0.1:9200' ]; $client = \Elasticsearch\ClientBuilder::create()-&gt;setHosts($hosts)-&gt;build(); $params = [ 'index' =&gt; 'my_index', 'type' =&gt; 'my_type', 'body' =&gt; [ 'settings' =&gt; [ 'number_of_shards' =&gt; 3, 'number_of_replicas' =&gt; 2, ], 'mappings' =&gt; [ 'my_type' =&gt; [ '_source' =&gt; [ 'enabled' =&gt; true ], 'properties' =&gt; [ 'contents' =&gt; [ 'type' =&gt; 'text', // 字符串型 'analyzer'=&gt;'ik_max_word', //ik_max_word 最细粒度拆分 ik_smart最粗粒度拆分// 'analyzer'=&gt;[// 'default'=&gt; [// 'type'=&gt; 'keyword'// ]// ], 'search_analyzer'=&gt; 'ik_max_word' ] ] ] ], 'testField' =&gt; 'ElasticSearch测试、IK分词简单测试(PHP) - 派煌篇的博..._CSDN博客', ] ];//my_type 是 my_index 索引的类型名////properties 代表 该类型中的属性////first_name 你可以理解为数据库中的表中的字段。type 是类型。6.5 中没有 string 这个类型了，统一叫 text。 analyzer 标识分析器，这里我们采用 我们下载的 ik 中的 ik_max_word。////IK分词支持两种分析器Analyzer: ik_smart , ik_max_word , 两种分词器Tokenizer: ik_smart , ik_max_word，//ik_max_word: 会将文本做最细粒度的拆分，比如会将“中华人民共和国国歌”拆分为“中华人民共和国,中华人民,中华,华人,人民共和国,人民,人,民,共和国,共和,和,国国,国歌”，会穷尽各种可能的组合；//ik_smart: 会做最粗粒度的拆分，比如会将“中华人民共和国国歌”拆分为“中华人民共和国,国歌”。 $response = $client-&gt;index($params); dump($response);// $params = [// 'index' =&gt; 'my_index',// 'type' =&gt; 'my_type',//// 'id' =&gt; 'u0Jhs20B8L96YVnGKiGf'// ];// $response = $client-&gt;get($params);// dump($response); $params = [ 'index' =&gt; 'my_index', 'type' =&gt; 'my_type', 'body' =&gt; [ 'query' =&gt; [ 'match' =&gt; [ 'testField' =&gt; 'elastic php ik' ] ], 'highlight' =&gt; [ 'pre_tags' =&gt; ["&lt;em&gt;"], 'post_tags' =&gt; ["&lt;/em&gt;"], 'fields' =&gt; [ "*" =&gt; new \stdClass() ], 'require_field_match' =&gt; false ] ] ]; $response = $client-&gt;search($params); dump($response); $params = [ 'index' =&gt; 'my_index', 'type' =&gt; 'my_type', 'body' =&gt; [ 'query' =&gt; [ 'match_phrase_prefix' =&gt; [ 'testField' =&gt; 'elastic' ], ], 'highlight' =&gt; [ 'pre_tags' =&gt; ["&lt;em&gt;"], 'post_tags' =&gt; ["&lt;/em&gt;"], 'fields' =&gt; [ "*" =&gt; new \stdClass() ], 'require_field_match' =&gt; true ] ] ]; $response = $client-&gt;search($params); dump($response); echo "wildcard"; $params = [ 'index' =&gt; 'my_index', 'type' =&gt; 'my_type', 'body' =&gt; [ 'query' =&gt; [ 'wildcard' =&gt; [ 'testField' =&gt; '*elastic*' ], ], 'highlight' =&gt; [ 'pre_tags' =&gt; ["&lt;em&gt;"], 'post_tags' =&gt; ["&lt;/em&gt;"], 'fields' =&gt; [ "*" =&gt; new \stdClass() ], 'require_field_match' =&gt; true ] ] ]; $response = $client-&gt;search($params); dump($response); echo "minimum_should_match"; $params = [ 'index' =&gt; 'my_index', 'type' =&gt; 'my_type', 'body' =&gt; [ 'query' =&gt; [ 'match' =&gt; [ 'testField' =&gt; [ "query"=&gt; "php", "operator"=&gt;"or", "minimum_should_match" =&gt; 1 ] ], ], 'highlight' =&gt; [ 'pre_tags' =&gt; ["&lt;em&gt;"], 'post_tags' =&gt; ["&lt;/em&gt;"], 'fields' =&gt; [ "*" =&gt; new \stdClass() ], 'require_field_match' =&gt; false ] ] ]; $response = $client-&gt;search($params); dump($response); $params = [ 'index' =&gt; 'my_index', 'type' =&gt; 'my_type', 'body' =&gt; [ 'query' =&gt; [ 'fuzzy' =&gt; [ "testField" =&gt; [ "value"=&gt;"pha", "fuzziness"=&gt; 2 ] ], ], 'highlight' =&gt; [ 'pre_tags' =&gt; ["&lt;em&gt;"], 'post_tags' =&gt; ["&lt;/em&gt;"], 'fields' =&gt; [ "*" =&gt; new \stdClass() ], 'require_field_match' =&gt; true ] ] ]; $response = $client-&gt;search($params); dump($response);//// $params = [// 'body' =&gt; [// 'text' =&gt; '中国',// 'analyzer'=&gt;'ik_max_word' //ik_max_word 精细 ik_smart 粗略// ]// ];// $res = $client-&gt;indices()-&gt;analyze($params);// dump($res); $search_params = [ 'index' =&gt; 'my_index', 'type' =&gt; 'my_type', 'body' =&gt; [// 'from' =&gt; 4,// 'size' =&gt; 2, //分页展示，from相当于分页中的偏移量，size相当于每页展示的条数 'query' =&gt; [ 'match' =&gt; [ 'testField' =&gt;['query'=&gt;'elastic php ik','operator' =&gt; 'OR'] //所有关键词都必须出现 可以不连续(默认是有一个词就匹配到) ]// "fields" : ["title", "content"] ], //设置高亮 "highlight" =&gt; [ "pre_tags" =&gt; [ '&lt;span style="color:red"&gt;' ], "post_tags" =&gt; [ '&lt;/span&gt;' ], 'fields'=&gt; [ '*' =&gt; new \stdClass() ] ] ] ]; $res = $client-&gt;search($search_params); dump($res);]]></content>
      <categories>
        <category>elasticsearch</category>
      </categories>
      <tags>
        <tag>laravel</tag>
        <tag>php</tag>
        <tag>elasticsearch</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[java数组]]></title>
    <url>%2Fposts%2Fac695e64.html</url>
    <content type="text"></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>数组</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[laravel base]]></title>
    <url>%2Fposts%2F92c55451.html</url>
    <content type="text"><![CDATA[配置composer源12composer global updatecomposer config -g repo.packagist composer https://mirrors.aliyun.com/composer/ 创建项目composer create-project –prefer-dist laravel/laravel pims nginx隐藏入口文件try_files $uri $uri/ /index.php?$query_string;]]></content>
      <categories>
        <category>laravel</category>
        <category>php</category>
      </categories>
      <tags>
        <tag>laravel</tag>
        <tag>php</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Centos - nginx - php - mysql - redis]]></title>
    <url>%2Fposts%2Fc210a9da.html</url>
    <content type="text"><![CDATA[Centos - nginx - php - mysql - redis centosCentOS-7-x86_64-Minimal-1908.iso nginxnginx-1.16.1.tar.gztengine-2.3.2.tar.gzopenresty-1.15.8.1.tar.gz phpphp-7.3.9.tar.gzcmake-3.15.3.tar.gzlibzip-1.5.2.tar.gzswoole-src-4.4.6.tar.gz mysqlredisredis-5.0.5.tar.gzphpredis-5.0.2.tar.gz 脚本安装1sed -i 's/\r$//' lnmp.sh 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205206207208209210211212213214215216217218219220221222223224225226227228229230231232233234235236237238239240241242243244245246247248249250251252253254255256257258259260261262263264265266267268269270271272273274275276277278279280281282283284285286287288289290291292293294295296297298299300301302303304305306307308309310311312313314315316317318319320321322323324325326327328329330#!/bin/shyum clean all #clear yumyum -y update #update yumyum -y install lrzsz #xshellyum -y install gcc gcc-c++ autoconf automake libtool make cmake vim wget zip unzipyum -y install zlib zlib-devel openssl openssl-devel pcre-devel yum -y install epel-releaseyum -y install libxml2 libxml2-devel openssl openssl-devel bzip2 bzip2-devel libcurl libcurl-devel libjpeg libjpeg-devel libpng libpng-devel freetype freetype-devel gmp gmp-devel libmcrypt libmcrypt-devel readline readline-devel libxslt libxslt-devel libzip libX11#centos 80firewall-cmd --zone=public --add-port=80/tcp --permanentfirewall-cmd --reload#----------------------tengine--------------------------------cd ~#tengine服务器的安装wget -c http://tengine.taobao.org/download/tengine-2.3.2.tar.gztar zxvf tengine*groupadd nginxuseradd -g nginx -M tenginecd tengine*./configure --prefix=/usr/local/tengine \--pid-path=/usr/local/tengine/run/nginx.pid \--with-http_ssl_module \--user=tengine \--group=nginx \--with-pcre make&amp;&amp;make install/usr/local/tengine/sbin/nginx -c /usr/local/tengine/conf/nginx.confecho '[Unit]Description=tengine - high performance web serverAfter=network.target remote-fs.target nss-lookup.target[Service]Type=forkingPIDFile=/usr/local/tengine/run/nginx.pidExecStartPre=/usr/local/tengine/sbin/nginx -t -c /usr/local/tengine/conf/nginx.confExecStart=/usr/local/tengine/sbin/nginx -c /usr/local/tengine/conf/nginx.confExecReload=/usr/local/tengine/sbin/nginx -s reloadExecStop=/usr/local/tengine/sbin/nginx -s stopExecQuit=/usr/local/tengine/sbin/nginx -s quitPrivateTmp=true[Install]WantedBy=multi-user.target ' &gt; /usr/lib/systemd/system/tengine.servicechmod +x /usr/lib/systemd/system/tengine.servicesystemctl enable tengine/usr/local/tengine/sbin/nginx -s stopsystemctl restart tengine#-------------------------nginx-----------------------------cd ~wget -c http://nginx.org/download/nginx-1.16.1.tar.gztar zxvf nginx*useradd -g nginx -M nginxcd nginx*./configure --prefix=/usr/local/nginx \--pid-path=/usr/local/nginx/run/nginx.pid \--with-http_ssl_module \--user=nginx \--group=nginx \--with-pcre make&amp;&amp;make install/usr/local/nginx/sbin/nginx -c /usr/local/nginx/conf/nginx.confecho '[Unit]Description=nginx - high performance web serverAfter=network.target remote-fs.target nss-lookup.target[Service]Type=forkingPIDFile=/usr/local/nginx/run/nginx.pidExecStartPre=/usr/local/nginx/sbin/nginx -t -c /usr/local/nginx/conf/nginx.confExecStart=/usr/local/nginx/sbin/nginx -c /usr/local/nginx/conf/nginx.confExecReload=/usr/local/nginx/sbin/nginx -s reloadExecStop=/usr/local/nginx/sbin/nginx -s stopExecQuit=/usr/local/nginx/sbin/nginx -s quitPrivateTmp=true[Install]WantedBy=multi-user.target ' &gt; /usr/lib/systemd/system/nginx.servicechmod +x /usr/lib/systemd/system/nginx.service/usr/local/nginx/sbin/nginx -s stopsystemctl enable nginxsystemctl restart nginx#---------------------------openresty---------------------------cd ~wget -c https://openresty.org/download/openresty-1.15.8.1.tar.gztar zxvf openresty*useradd -g nginx -M openrestycd openresty*./configure --prefix=/usr/local/openresty \--pid-path=/usr/local/openresty/run/nginx.pid \--with-http_ssl_module \--user=openresty \--group=nginx \--with-pcre make&amp;&amp;make install/usr/local/openresty/nginx/sbin/nginx -c /usr/usr/local/openresty/nginx/conf/nginx.confecho '[Unit]Description=openresty - high performance web serverAfter=network.target remote-fs.target nss-lookup.target[Service]Type=forkingPIDFile=/usr/local/openresty/run/nginx.pidExecStartPre=/usr/local/openresty/nginx/sbin/nginx -t -c /usr/local/openresty/nginx/conf/nginx.confExecStart=/usr/local/openresty/nginx/sbin/nginx -c /usr/local/openresty/nginx/conf/nginx.confExecReload=/usr/local/openresty/nginx/sbin/nginx -s reloadExecStop=/usr/local/openresty/nginx/sbin/nginx -s stopExecQuit=/usr/local/openresty/nginx/sbin/nginx -s quitPrivateTmp=true[Install]WantedBy=multi-user.target ' &gt; /usr/lib/systemd/system/openresty.servicechmod +x /usr/lib/systemd/system/openresty.servicesystemctl enable openresty/usr/local/openresty/nginx/sbin/nginx -s stopsystemctl restart openresty#---------------------------php7---------------------------cd ~wget -c https://github.com/Kitware/CMake/releases/download/v3.15.3/cmake-3.15.3.tar.gztar -zxvf cmake*cd cmake*./bootstrapmake &amp;&amp; make installcmake --versionhash -ryum remove libzip -ycd ~wget https://libzip.org/download/libzip-1.5.2.tar.gztar -zxvf libzip*cd libzip*mkdir buildcd buildcmake ..make &amp;&amp; make installecho "/usr/local/lib64" &gt;&gt; /etc/ld.so.conf echo "/usr/local/lib" &gt;&gt; /etc/ld.so.conf echo "/usr/lib" &gt;&gt; /etc/ld.so.conf echo "/usr/lib64" &gt;&gt; /etc/ld.so.confldconfig -v # 使之生效cd ~wget -c https://github.com/php/php-src/archive/php-7.3.9.tar.gztar -xzvf php*cd php*./configure --help./configure --prefix=/usr/local/php73 \--with-config-file-path=/usr/local/php73/etc \--with-config-file-scan-dir=/usr/local/php73/etc/php.d \--with-mcrypt \--enable-mysqlnd \--enable-fpm \--with-fpm-user=nginx \--with-fpm-group=nginx \--enable-xml \--enable-pcntl \--enable-zip \--enable-inline-optimization \--disable-debug \--disable-rpath \--enable-shared \--enable-soap \--with-xmlrpc \--with-openssl \--with-pcre-regex \--with-sqlite3 \--with-zlib \--enable-bcmath \--with-iconv \--with-bz2 \--enable-calendar \--with-curl \--with-cdb \--enable-dom \--enable-exif \--enable-fileinfo \--enable-filter \--with-pcre-dir \--enable-ftp \--with-gd \--with-openssl-dir \--with-jpeg-dir \--with-png-dir \--with-freetype-dir \--enable-gd-native-ttf \--enable-gd-jis-conv \--with-gettext \--with-gmp \--with-mhash \--enable-json \--enable-mbstring \--enable-mbregex \--enable-mbregex-backtrack \--with-libmbfl \--with-onig \--enable-pdo \--with-mysqli=mysqlnd \--with-pdo-mysql=mysqlnd \--with-zlib-dir \--with-pdo-sqlite \--with-readline \--enable-session \--enable-shmop \--enable-simplexml \--enable-sockets \--enable-sysvmsg \--enable-sysvsem \--enable-sysvshm \--enable-wddx \--with-libxml-dir \--with-xsl \--enable-mysqlnd-compression-support \--with-pear \--enable-opcachemake &amp;&amp; make install/usr/local/php73/bin/php -v/usr/local/php73/bin/php -i | grep php.inicp php.ini-production /usr/local/php73/etc/php.ini/usr/local/php73/bin/php -i | grep php.inicd /usr/local/php73/etccp php-fpm.conf.default php-fpm.confcp php-fpm.d/www.conf.default php-fpm.d/www.confcd ~/php*cp sapi/fpm/php-fpm.service /usr/lib/systemd/system/php-fpm.servicesystemctl start php-fpm.servicesystemctl enable php-fpm.servicecp sapi/fpm/php-fpm.service /usr/lib/systemd/system/php-fpm-73.servicesystemctl enable php-fpm-73.servicesystemctl start php-fpm-73.service#添加全局#export PATH=$PATH:/usr/local/php73/binecho -e 'export PATH=/usr/local/php73/bin/:/usr/local/php73/sbin/:$PATH' &gt;&gt; /etc/profile &amp;&amp; source /etc/profilesource /etc/profile#pecl install swoolecd ~wget https://github.com/swoole/swoole-src/archive/v4.4.6.tar.gztar -zxvf swoole*cd swoole*make cleanphpizewhich php-config #/usr/local/php73/bin/php-config./configure --with-php-config=/usr/local/php73/bin/php-configmake &amp;&amp; make installyum -y remove mysql80-community-release-el7-1.noarchwget http://repo.mysql.com/mysql80-community-release-el7-3.noarch.rpmyum -y localinstall mysql80-community-release-el7-3.noarch.rpmyum repolist all | grep mysqlyum -y install mysql-community-serversystemctl start mysqld.servicefirewall-cmd --zone=public --add-port=3306/tcp --permanentfirewall-cmd --reload#-----------------------redis------------------------------cd ~wget -c http://download.redis.io/releases/redis-5.0.5.tar.gztar zxvf redis*cd redis*./configure --prefix=/usr/local/redismv redis-5.0.5 /usr/local/rediscd /usr/local/redismake &amp;&amp; make installcd ~#wget -c https://github.com/phpredis/phpredis/archive/5.0.2.tar.gztar -zxvf phpredis*cd phpredis* # 进入 phpredis 目录make cleanphpizewhich php-config #/usr/local/php73/bin/php-config./configure --with-php-config=/usr/local/php73/bin/php-configmake &amp;&amp; make installwget https://dl.laravel-china.org/composer.phar -O /usr/local/bin/composerchmod a+x /usr/local/bin/composercurl -sS https://getcomposer.org/installer | phpcp composer.phar /usr/local/bin/composercomposer config -g repo.packagist composer https://mirrors.aliyun.com/composer/#centos 9501firewall-cmd --zone=public --add-port=9501/tcp --permanentfirewall-cmd --reload]]></content>
      <categories>
        <category>php</category>
        <category>linux</category>
      </categories>
      <tags>
        <tag>php</tag>
        <tag>lnmp</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[hexo ->Next]]></title>
    <url>%2Fposts%2F1b2993f2.html</url>
    <content type="text"><![CDATA[基于hexo，Next主题，在GitHub平台下创建个人博客 注册GitHub账号创建repository为 账号名.github.io setting &gt; option &gt; GitHub Pages&gt;&gt;choose a theme 本地创建hexo项目1234567891011121314151617181920npm install hexo-cli -gmkdir hexohexo init hexocd hexonpm installhexo servergit clone https://github.com/theme-next/hexo-theme-next themes/nextnpm install hexo-abbrlink --savenpm install hexo-generator-searchdb --savenpm install hexo-symbols-count-time --savenpm install hexo-helper-live2d --savenpm install live2d-widget-model-hijiki --savenpm install live2d-widget-model-tororo --savenpm install live2d-widget-model-shizuku --savenpm install live2d-widget-model-z16 --savehexo new page categorieshexo new page tags 配置git信息123git config --global user.name "账号名"git config --global user.name "注册的邮箱"ssh-keygen -t rsa -C "注册的邮箱" 项目的_config.yml1234567npm install hexo-deployer-git --save#https://hexo.io/docs/deployment.htmldeploy: type: git repo: https://github.com/账号名/账号名.github.io.git branch: master]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
</search>
